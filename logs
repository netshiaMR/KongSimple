# Use the official Ubuntu base image
FROM ubuntu:latest

# Set environment variables to non-interactive (this prevents some prompts)
ENV DEBIAN_FRONTEND=non-interactive

# Install software updates and required utilities
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
    ca-certificates \
    wget \
    openssl \
    software-properties-common

# Install OpenJDK 17
RUN add-apt-repository -y ppa:openjdk-r/ppa \
    && apt-get update \
    && apt-get install -y openjdk-17-jdk

# Add your application's .cer certificate
COPY your-application.cer /tmp/

# Import the application certificate into the Java truststore
RUN keytool -importcert -file /tmp/your-application.cer -alias your-alias -keystore $JAVA_HOME/lib/security/cacerts -storepass changeit -noprompt

# Clean up
RUN rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Your application-specific commands here
# ...

# Set the default command to run your application (if any)
# CMD ["your-command-here"]



#!/bin/bash

# Define the directory containing the .cer files
CERT_DIR="/path/to/certificates"

# Define the truststore location and its password
TRUSTSTORE_PATH="path_to_client-truststore.jks"
TRUSTSTORE_PASS="your_truststore_password"

# Iterate over each .cer file in the directory and import it
for CERT_FILE in $CERT_DIR/*.cer
do
  # Generate an alias from the certificate file name
  ALIAS=$(basename -- "$CERT_FILE")
  ALIAS="${ALIAS%.*}"

  # Import the certificate into the truststore
  keytool -import -file $CERT_FILE -alias $ALIAS -keystore $TRUSTSTORE_PATH -storepass $TRUSTSTORE_PASS -noprompt
done





#!/bin/bash

# Path to directory containing .cer files
CERT_DIR="/path/to/certificates"

# Iterate over each .cer file in the directory
for CERT_FILE in $CERT_DIR/*.cer; do
  # Extract the subject field from the certificate
  SUBJECT=$(openssl x509 -inform der -in $CERT_FILE -subject -noout 2>/dev/null)

  # Check if the openssl command was successful
  if [ $? -eq 0 ]; then
    # Generate an alias name based on the subject field
    ALIAS=$(echo $SUBJECT | sed 's/.*CN=\([^,/]*\).*/\1/')
    echo "File: $CERT_FILE, Alias: $ALIAS"
  else
    echo "File: $CERT_FILE is not a valid DER-encoded certificate"
  fi
done






#!/bin/bash

# Path to directory containing .cer files
CERT_DIR="/path/to/certificates"

# Iterate over each .cer file in the directory
for CERT_FILE in $CERT_DIR/*.cer; do
  # Try reading as DER first
  SUBJECT=$(openssl x509 -inform der -in $CERT_FILE -subject -noout 2>/dev/null)

  if [ $? -eq 0 ]; then
    # DER format successful
    ALIAS=$(echo $SUBJECT | sed 's/.*CN=\([^,/]*\).*/\1/')
    echo "File: $CERT_FILE, Alias: $ALIAS (DER format)"
  else
    # Try reading as PEM
    SUBJECT=$(openssl x509 -inform pem -in $CERT_FILE -subject -noout 2>/dev/null)
    
    if [ $? -eq 0 ]; then
      # PEM format successful
      ALIAS=$(echo $SUBJECT | sed 's/.*CN=\([^,/]*\).*/\1/')
      echo "File: $CERT_FILE, Alias: $ALIAS (PEM format)"
    else
      # Invalid certificate
      echo "File: $CERT_FILE is not a valid certificate in DER or PEM format"
    fi
  fi
done





#!/bin/bash

# Define the directory containing the .cer files
CERT_DIR="/path/to/certificates"

# Iterate over each .cer file in the directory
for CER_FILE in $CERT_DIR/*.cer; do
  # Generate a name for the .crt file based on the .cer file name
  CRT_FILE="${CER_FILE%.cer}.crt"
  
  # Convert the .cer file to .crt format
  openssl x509 -inform der -in $CER_FILE -out $CRT_FILE 2>/dev/null

  # Check if the openssl command was successful
  if [ $? -eq 0 ]; then
    echo "Converted: $CER_FILE to $CRT_FILE"
  else
    # Try converting assuming it's PEM format
    openssl x509 -inform pem -in $CER_FILE -out $CRT_FILE 2>/dev/null

    if [ $? -eq 0 ]; then
      echo "Converted (PEM): $CER_FILE to $CRT_FILE"
    else
      echo "Failed to convert: $CER_FILE"
    fi
  fi
done
