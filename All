fastapi
uvicorn
sqlalchemy
databases



from sqlalchemy import create_engine, MetaData

DATABASE_URL = "sqlite:///./test.db"
metadata = MetaData()

engine = create_engine(DATABASE_URL)


from sqlalchemy import Table, Column, Integer, String, MetaData

metadata = MetaData()

customers = Table(
    "customers",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("name", String),
    Column("email", String),
)


from fastapi import APIRouter, HTTPException
from sqlalchemy.sql import select
from app.database import engine
from app.models import customers

router = APIRouter()

@router.post("/create/")
async def create_customer(name: str, email: str):
    query = customers.insert().values(name=name, email=email)
    last_record_id = await engine.connect().execute(query)
    return { "id": last_record_id, "name": name, "email": email }

@router.get("/{customer_id}")
async def get_customer(customer_id: int):
    query = customers.select().where(customers.c.id == customer_id)
    result = await engine.connect().fetch_one(query)
    if not result:
        raise HTTPException(status_code=404, detail="Customer not found")
    return result

@router.put("/{customer_id}")
async def update_customer(customer_id: int, name: str, email: str):
    query = customers.update().where(customers.c.id == customer_id).values(name=name, email=email)
    await engine.connect().execute(query)
    return {"status": "updated"}

@router.delete("/{customer_id}")
async def delete_customer(customer_id: int):
    query = customers.delete().where(customers.c.id == customer_id)
    await engine.connect().execute(query)
    return {"status": "deleted"}




version: '3.8'

services:
  web:
    build: .
    command: uvicorn app.main:app --reload --host 0.0.0.0 --port 8000
    volumes:
      - ./app:/app
    ports:
      - "8000:8000"



FROM python:3.9

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY ./app /app/app

CMD ["python", "/app/app/main.py"]
